/* CompiladorAula.java */
/* Generated By:JavaCC: Do not edit this line. CompiladorAula.java */
public class CompiladorAula implements CompiladorAulaConstants {
  static String pos(Token t)
  {
        if (t == null) return "posi\u00e7\u00e3o desconhecida";
                return "linha " + t.beginLine + ", coluna " + t.beginColumn;
  }

  public static void main(String args []) throws ParseException
  {
        System.out.println("Parser build: 2025-09-27-ifstmt-blocos");

    CompiladorAula parser = new CompiladorAula(System.in);
    while (true)
    {
      System.out.println("Welcome to the world! Start New World");
      System.out.print("----- >  :");
      try
      {
        parser.main();
      }
      catch (Exception e)
      {
        System.out.println("\nDeu ruim."); /*falta melhorar o tratamento de erros específicos do compilador*/
        System.out.println(e.getMessage());
        CompiladorAula.ReInit(System.in);
      }
      catch (TokenMgrError e)
          {
        System.out.println("\nErro l\u00e9xico, tu n\u00e3o leu a gram\u00e1tica n\u00e9.");
        System.out.println(e.getMessage());
        CompiladorAula.ReInit(System.in);
          }
      catch (Error e)
      {
        System.out.println("\nOops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

/* ---------------------------------------------------- START BLOCO PRINCIPAL ---------------------------------------------------------------------------------*/
  static final public void main() throws ParseException {
    jj_consume_token(CREATEWORLD);
    jj_consume_token(ID);
    jj_consume_token(PONTOVIRGULA);
    bloco();
}

  static final public void bloco() throws ParseException {
    jj_consume_token(OVERWORLD);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIPOINTEIRO:
      case TIPOFLUTUANTE:
      case TIPOTEXTO:
      case TIPOGRAVETO:
      case TIPODIAMANTE:
      case TIPOBINARIO:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      declaracaoVariavel();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case BREAK:
      case FOR:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      comando();
    }
    jj_consume_token(BEDROCK);
}

/* ---------------------------------------------------- END BLOCO PRINCIPAL ---------------------------------------------------------------------------------*/
  static final public 
void comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      atribuicao();
      break;
      }
    case IF:{
      ifStmt();
      break;
      }
    case WHILE:{
      whileLoop();
      break;
      }
    case FOR:{
      forLoop();
      break;
      }
    case BREAK:{
      breakStmt();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* ---------------------------------------------------- START BLOCO WHILE ---------------------------------------------------------------------------------*/
  static final public void whileLoop() throws ParseException {
    jj_consume_token(WHILE);
    expressaoBooleana();
    jj_consume_token(ABRIRWHILE);
    blocoWhile();
    jj_consume_token(FECHARWHILE);
}

  static final public void blocoWhile() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIPOINTEIRO:
      case TIPOFLUTUANTE:
      case TIPOTEXTO:
      case TIPOGRAVETO:
      case TIPODIAMANTE:
      case TIPOBINARIO:{
        declaracaoVariavel();
        break;
        }
      case IF:
      case WHILE:
      case BREAK:
      case FOR:
      case ID:{
        comando();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIPOINTEIRO:
      case TIPOFLUTUANTE:
      case TIPOTEXTO:
      case TIPOGRAVETO:
      case TIPODIAMANTE:
      case TIPOBINARIO:
      case IF:
      case WHILE:
      case BREAK:
      case FOR:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
    }
}

/* Sintático: aceita sempre; a regra “só dentro de loop” é semântica */
  static final public void breakStmt() throws ParseException {
    jj_consume_token(BREAK);
    jj_consume_token(PONTOVIRGULA);
}

/* ---------------------------------------------------- END BLOCO WHILE ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- START BLOCO FOR ---------------------------------------------------------------------------------*/
  static final public void forLoop() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(PARENTES_ESQUERDA);
    forInitOpt();
    jj_consume_token(PONTOVIRGULA);
    forCondOpt();
    jj_consume_token(PONTOVIRGULA);
    forUpdateOpt();
    jj_consume_token(PARENTES_DIREITA);
    jj_consume_token(ABRIRFOR);
    blocoFor();
    jj_consume_token(FECHARFOR);
}

  static final public void blocoFor() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIPOINTEIRO:
      case TIPOFLUTUANTE:
      case TIPOTEXTO:
      case TIPOGRAVETO:
      case TIPODIAMANTE:
      case TIPOBINARIO:{
        declaracaoVariavel();
        break;
        }
      case IF:
      case WHILE:
      case BREAK:
      case FOR:
      case ID:{
        comando();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIPOINTEIRO:
      case TIPOFLUTUANTE:
      case TIPOTEXTO:
      case TIPOGRAVETO:
      case TIPODIAMANTE:
      case TIPOBINARIO:
      case IF:
      case WHILE:
      case BREAK:
      case FOR:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
    }
}

  static final public void forInitOpt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIPOINTEIRO:
    case TIPOFLUTUANTE:
    case TIPOTEXTO:
    case TIPOGRAVETO:
    case TIPODIAMANTE:
    case TIPOBINARIO:
    case ID:{
      forInit();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
}

  static final public void forCondOpt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case NOT:
    case DECIMAL:
    case ID:
    case PARENTES_ESQUERDA:{
      expressaoBooleana();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
}

  static final public void forUpdateOpt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      atribuicaoFor();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VIRGULA:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        jj_consume_token(VIRGULA);
        atribuicaoFor();
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
}

  static final public void forInit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIPOINTEIRO:
    case TIPOFLUTUANTE:
    case TIPOTEXTO:
    case TIPOGRAVETO:
    case TIPODIAMANTE:
    case TIPOBINARIO:{
      tipoDado();
      listaDeclaracoes();
      break;
      }
    case ID:{
      atribuicaoFor();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void atribuicaoFor() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(ATRIBUICAO);
    expressaoGeral();
}

/* ---------------------------------------------------- END BLOCO FOR ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- START ESTRUTURA DE CONTROLE ---------------------------------------------------------------------------------*/
  static final public void ifStmt() throws ParseException {
    jj_consume_token(IF);
    expressaoBooleana();
    jj_consume_token(ABRIRIF);
    jj_consume_token(THEN);
    blocoIf();
    jj_consume_token(FECHARIF);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      jj_consume_token(ABRIRELSE);
      blocoElse();
      jj_consume_token(FECHARELSE);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
}

  static final public void blocoIf() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIPOINTEIRO:
      case TIPOFLUTUANTE:
      case TIPOTEXTO:
      case TIPOGRAVETO:
      case TIPODIAMANTE:
      case TIPOBINARIO:{
        declaracaoVariavel();
        break;
        }
      case IF:
      case WHILE:
      case BREAK:
      case FOR:
      case ID:{
        comando();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIPOINTEIRO:
      case TIPOFLUTUANTE:
      case TIPOTEXTO:
      case TIPOGRAVETO:
      case TIPODIAMANTE:
      case TIPOBINARIO:
      case IF:
      case WHILE:
      case BREAK:
      case FOR:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
    }
}

  static final public void blocoElse() throws ParseException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIPOINTEIRO:
      case TIPOFLUTUANTE:
      case TIPOTEXTO:
      case TIPOGRAVETO:
      case TIPODIAMANTE:
      case TIPOBINARIO:{
        declaracaoVariavel();
        break;
        }
      case IF:
      case WHILE:
      case BREAK:
      case FOR:
      case ID:{
        comando();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIPOINTEIRO:
      case TIPOFLUTUANTE:
      case TIPOTEXTO:
      case TIPOGRAVETO:
      case TIPODIAMANTE:
      case TIPOBINARIO:
      case IF:
      case WHILE:
      case BREAK:
      case FOR:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
    }
}

/* ---------------------------------------------------- END ESTRUTURA DE CONTROLE ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- START ATRIBUIÇÃO ---------------------------------------------------------------------------------*/
  static final public void atribuicao() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(ATRIBUICAO);
    expressaoGeral();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PONTOVIRGULA:{
      jj_consume_token(PONTOVIRGULA);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
Token prox = token.next;
      {if (true) throw new ParseException("Faltou ';' no fim da atribui\u00e7\u00e3o (" + pos(prox) + ").");}
    }
}

/* ---------------------------------------------------- END ATRIBUIÇÃO ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- START CONTROLE DE EXPRESSÕES ---------------------------------------------------------------------------------*/
  static final public void expressaoGeral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:{
      expressaoTexto();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      if (jj_2_1(2147483647)) {
        expressaoBooleana();
      } else if (jj_2_2(2147483647)) {
        expressaoBooleana();
      } else if (jj_2_3(2147483647)) {
        expressaoBooleana();
      } else if (jj_2_4(2147483647)) {
        expressaoBooleana();
      } else if (jj_2_5(2147483647)) {
        expressaoBooleana();
      } else if (jj_2_6(2147483647)) {
        expressaoBooleana();
      } else if (jj_2_7(2147483647)) {
        expressaoBooleana();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DECIMAL:
        case ID:
        case PARENTES_ESQUERDA:{
          expressao();
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

/* ---------------------------------------------------- END CONTROLE DE EXPRESSÕES ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- START EXPRESSAO NÚMERICA ---------------------------------------------------------------------------------*/

/* Expressões numéricas (somente números, variáveis e parênteses) */
  static final public void expressao() throws ParseException {
    termoNumerico();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SOMA:
      case SUBTRACAO:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SOMA:{
        jj_consume_token(SOMA);
        break;
        }
      case SUBTRACAO:{
        jj_consume_token(SUBTRACAO);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termoNumerico();
    }
}

  static final public void termoNumerico() throws ParseException {
    fatorNumerico();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTIPLICACAO:
      case DIVISAO:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTIPLICACAO:{
        jj_consume_token(MULTIPLICACAO);
        break;
        }
      case DIVISAO:{
        jj_consume_token(DIVISAO);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      fatorNumerico();
    }
}

  static final public void fatorNumerico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      break;
      }
    case DECIMAL:{
      jj_consume_token(DECIMAL);
      break;
      }
    case PARENTES_ESQUERDA:{
      jj_consume_token(PARENTES_ESQUERDA);
      expressao();
      jj_consume_token(PARENTES_DIREITA);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* ---------------------------------------------------- END EXPRESSAO NUMÉRICA ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- START EXPRESSAO TEXTO ---------------------------------------------------------------------------------*/
  static final public 

void expressaoTexto() throws ParseException {
    jj_consume_token(STRING);
}

/* ---------------------------------------------------- END EXPRESSAO TEXTO ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- START EXPRESSAO BOOLEANA ---------------------------------------------------------------------------------*/
  static final public 
void expressaoBooleana() throws ParseException {
    termoBooleano();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_10;
      }
      jj_consume_token(OR);
      termoBooleano();
    }
}

  static final public void termoBooleano() throws ParseException {
    fatorBooleano();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_11;
      }
      jj_consume_token(AND);
      fatorBooleano();
    }
}

  static final public void fatorBooleano() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      fatorBooleano();
      break;
      }
    case PARENTES_ESQUERDA:{
      parentesadoBoolOuRel();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      if (jj_2_8(2147483647)) {
        comparacaoNumerica();
      } else if (jj_2_9(2147483647)) {
        comparacaoNumerica();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          jj_consume_token(ID);
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  static final public void parentesadoBoolOuRel() throws ParseException {
    if (jj_2_10(2147483647)) {
      jj_consume_token(PARENTES_ESQUERDA);
      expressao();
      tipoCondicao();
      expressao();
      jj_consume_token(PARENTES_DIREITA);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PARENTES_ESQUERDA:{
        jj_consume_token(PARENTES_ESQUERDA);
        expressaoBooleana();
        jj_consume_token(PARENTES_DIREITA);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

/* ---------------------------------------------------- END EXPRESSAO BOOLEANA ---------------------------------------------------------------------------------*/
  static final public 
void comparacaoNumerica() throws ParseException {
    expressao();
    tipoCondicao();
    expressao();
}

/* ---------------------------------------------------- START DECLARACAO VARIAVEL ---------------------------------------------------------------------------------*/
  static final public 
void declaracaoVariavel() throws ParseException {
    tipoDado();
    listaDeclaracoes();
    jj_consume_token(PONTOVIRGULA);
}

  static final public void listaDeclaracoes() throws ParseException {
    declaracaoUnica();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        break label_12;
      }
      jj_consume_token(VIRGULA);
      declaracaoUnica();
    }
}

  static final public void declaracaoUnica() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATRIBUICAO:{
      jj_consume_token(ATRIBUICAO);
      expressaoGeral();
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
}

/* ---------------------------------------------------- END DECLARACAO VARIAVEL ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- START TIPOS DE DADOS---------------------------------------------------------------------------------*/
  static final public 
void tipoDado() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIPOINTEIRO:{
      jj_consume_token(TIPOINTEIRO);
      break;
      }
    case TIPOBINARIO:{
      jj_consume_token(TIPOBINARIO);
      break;
      }
    case TIPOTEXTO:{
      jj_consume_token(TIPOTEXTO);
      break;
      }
    case TIPOFLUTUANTE:{
      jj_consume_token(TIPOFLUTUANTE);
      break;
      }
    case TIPOGRAVETO:{
      jj_consume_token(TIPOGRAVETO);
      break;
      }
    case TIPODIAMANTE:{
      jj_consume_token(TIPODIAMANTE);
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* ---------------------------------------------------- END TIPOS DE DADOS ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- STAR TIPO DE CONDIÇÃO ---------------------------------------------------------------------------------*/
  static final public 
void tipoCondicao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAIOR:{
      jj_consume_token(MAIOR);
      break;
      }
    case MENOR:{
      jj_consume_token(MENOR);
      break;
      }
    case MAIOR_IGUAL:{
      jj_consume_token(MAIOR_IGUAL);
      break;
      }
    case MENOR_IGUAL:{
      jj_consume_token(MENOR_IGUAL);
      break;
      }
    case IGUAL:{
      jj_consume_token(IGUAL);
      break;
      }
    case DIFERENTE:{
      jj_consume_token(DIFERENTE);
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_3R_fatorNumerico_277_3_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_3R_fatorNumerico_277_22_19()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_scan_token(DECIMAL)) return true;
    if (jj_3R_tipoCondicao_359_9_14()) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_tipoCondicao_359_9_14()) return true;
    return false;
  }

  static private boolean jj_3R_termoNumerico_272_3_15()
 {
    if (jj_3R_fatorNumerico_277_3_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_termoNumerico_272_21_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_tipoCondicao_359_9_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_expressao_267_3_13()
 {
    if (jj_3R_termoNumerico_272_3_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expressao_267_21_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_3R_expressao_267_3_13()) return true;
    if (jj_3R_tipoCondicao_359_9_14()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_scan_token(PARENTES_ESQUERDA)) return true;
    if (jj_3R_expressao_267_3_13()) return true;
    if (jj_3R_tipoCondicao_359_9_14()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_scan_token(PARENTES_ESQUERDA)) return true;
    if (jj_scan_token(PARENTES_ESQUERDA)) return true;
    if (jj_scan_token(DECIMAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_scan_token(PARENTES_ESQUERDA)) return true;
    if (jj_scan_token(PARENTES_ESQUERDA)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(PARENTES_ESQUERDA)) return true;
    if (jj_scan_token(DECIMAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(PARENTES_ESQUERDA)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_fatorNumerico_277_22_19()
 {
    if (jj_scan_token(PARENTES_ESQUERDA)) return true;
    if (jj_3R_expressao_267_3_13()) return true;
    if (jj_scan_token(PARENTES_DIREITA)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_termoNumerico_272_21_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    if (jj_3R_fatorNumerico_277_3_17()) return true;
    return false;
  }

  static private boolean jj_3R_expressao_267_21_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    if (jj_3R_termoNumerico_272_3_15()) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_scan_token(PARENTES_ESQUERDA)) return true;
    if (jj_3R_expressao_267_3_13()) return true;
    if (jj_3R_tipoCondicao_359_9_14()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorAulaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x3f00,0x64004000,0x64004000,0x64007f00,0x64007f00,0x64007f00,0x64007f00,0x3f00,0x260000,0x0,0x0,0x3f00,0x10000,0x64007f00,0x64007f00,0x64007f00,0x64007f00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x80000,0x260000,0x0,0x0,0x0,0x0,0x3f00,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x85000,0x20000,0x4000,0x4000,0x0,0x4000,0x4000,0x4000,0x4000,0x10000,0x40000,0x85000,0x6,0x6,0x18,0x18,0x85000,0x0,0x0,0x80000,0x4000,0x80000,0x20000,0x20,0x0,0xfc0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[10];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CompiladorAula(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CompiladorAula(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new CompiladorAulaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CompiladorAula(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new CompiladorAulaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new CompiladorAulaTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CompiladorAula(CompiladorAulaTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CompiladorAulaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[54];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 34; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 54; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 10; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
