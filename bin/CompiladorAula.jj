/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(CompiladorAula)

public class CompiladorAula
{
  public static void main(String args []) throws ParseException
  {
    CompiladorAula parser = new CompiladorAula(System.in);
    while (true)
    {
      System.out.println("Welcome to the world! Start New World");
      System.out.print("----- >  :");
      try
      {
        parser.main();
      }
      catch (Exception e)
      {
        System.out.println("Deu ruim."); /*falta melhorar o tratamento de erros específicos do compilador*/
        System.out.println(e.getMessage());
        CompiladorAula.ReInit(System.in);
      }
      catch (TokenMgrError e)
	  {
        System.out.println("Erro léxico, tu não leu a gramática né.");
        System.out.println(e.getMessage());
        CompiladorAula.ReInit(System.in);
	  }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(CompiladorAula)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /*PALAVRAS RESERVADAS */
{
  < CRIARMUNDO     : "criarmundo"                         >
| < MUNDOABERTO    : "mundoaberto"                        >
| < ROCHAMAE       : "rochamae"                           >
| < TIPOINTEIRO    : "pedra"                              >
| < TIPOFLUTUANTE  : "agua"                               >
| < TIPOTEXTO      : "placa"                              >
| < TIPOGRAVETO    : "graveto"                            >
| < TIPODIAMANTE   : "blocoDiamante"                      >
| < TIPOBINARIO    : "redstone"                           >
| < IF             : "if"                                 >
| < THEN           : "build"                              >
| < ELSE           : "drop"                               >
} 

TOKEN : /*OPERADORES*/
{
	< SOMA: "combine"          >
|	< SUBTRACAO: "-"           >
|	< MULTIPLICACAO: "*"       >
|	< DIVISAO: "/"             >	
|	< ATRIBUICAO: "<-"         >
|	< MAIOR: "stronger"        >
|	< MENOR: "weaker"          >
|	< MENOR_IGUAL: "<="        >
|	< MAIOR_IGUAL: ">="        >
|	< DIFERENTE: "<>"          > 
|	< IGUAL: "="               >
}

TOKEN :
{
  < DECIMAL            : (< DIGITO >)+ ( "." (<DIGITO>)+ )?                                  >
| < DIGITO             : [ "0"-"9" ]                                                         >
| < ID                 : ["a" - "z" , "A" - "Z"](["a" - "z" , "A" - "Z" , "0" - "9", "_"])*  > 
| < LETRA              : ["A" - "Z" ] | ["a" - "z"]                                          >
| < PONTOVIRGULA       : ";"                                                                 >
| < VIRGULA            : ","                                                                 >
| < PARENTES_ESQUERDA  : "("                                                                 >
| < PARENTES_DIREITA   : ")"                                                                 >
| < DELIMITAR_VARCHAR  : "'"                                                                 > 
}

void main() : {}
{
  <CRIARMUNDO> <ID> <PONTOVIRGULA> /*teste inicial concluido, criação da main*/
  bloco() /*falta testar o que acontece qunado se adiciona o EOF no final*/
}

void bloco() : { }
{
  <MUNDOABERTO> (declaracaoVariavel())* (comando())* <ROCHAMAE> /*testar comando()*/
}

void comando() : {} 
{
  atribuicao() /*teste de atribuição concluido*/
| <IF> condicao() <THEN> comando() <ELSE> comando() /*####################################################3TESTANDO AGORA######*/
}

void atribuicao() : {}
{
  /*
  	expressão melhorada e passou nos testes de erros 
  */
  <ID> <ATRIBUICAO> expressao() <PONTOVIRGULA> 
}

/*expressao(), termo(), fator() ---- criei novos para melhorar o entendimento do tipo de expressão*/

void expressao() : {}
{
  termo() ( ( <SOMA> | <SUBTRACAO> ) termo() )*
}

void termo() : {}
{
  fator() ( ( <MULTIPLICACAO> | <DIVISAO> ) fator() )*
}

void fator() : {}
{
  <ID> | <DECIMAL> | <PARENTES_ESQUERDA> expressao() <PARENTES_DIREITA>
}

void condicao() : {} /*#######################################################3TESTANDO AGORA######*/
{
  expressao()
  tipoCondicao() /*falta testar o tipo de condição*/
  expressao()
}

void declaracaoVariavel() : {}
{ /*testede declaracao de variaveis concluido*/
  tipoDado() identificadorVariaveis() <PONTOVIRGULA>   /*aqui ele so permite que seja declarado, int a, b, c, não permite a declaração por exemplo de int a b;*/
}

void identificadorVariaveis() : {}
{/*teste de identificador de variável concluido*/
  <ID> ( <VIRGULA> <ID> )*
}

void tipoDado() : {} /*funcão que generaliza o tipo de dado */
{
	< TIPOINTEIRO > | <  TIPOBINARIO > | < TIPOTEXTO > | < TIPOFLUTUANTE > | < TIPOGRAVETO > | < TIPODIAMANTE >
}

void tipoCondicao() : {} /*função que generaliza as condições*/
{
	<MAIOR> | <MENOR> | <MAIOR_IGUAL> | <MENOR_IGUAL> | <IGUAL> | <DIFERENTE> 
}