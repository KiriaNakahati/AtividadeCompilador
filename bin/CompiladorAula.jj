
/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */


options
{
  static = true;
}

PARSER_BEGIN(CompiladorAula)



public class CompiladorAula
{
  static String pos(Token t)
  {
  	if (t == null) return "posição desconhecida";
  		return "linha " + t.beginLine + ", coluna " + t.beginColumn;
  }
  
  public static void main(String args []) throws ParseException
  {
	System.out.println("Parser build: 2025-09-27-ifstmt-blocos");
    
    CompiladorAula parser = new CompiladorAula(System.in);
    while (true)
    {
      System.out.println("Welcome to the world! Start New World");
      System.out.print("----- >  :");
      try
      {
        parser.main();
      }
      catch (Exception e)
      {
        System.out.println("\nDeu ruim."); /*falta melhorar o tratamento de erros específicos do compilador*/
        System.out.println(e.getMessage());
        CompiladorAula.ReInit(System.in);
      }
      catch (TokenMgrError e)
	  {
        System.out.println("\nErro léxico, tu não leu a gramática né.");
        System.out.println(e.getMessage());
        CompiladorAula.ReInit(System.in);
	  }
      catch (Error e)
      {
        System.out.println("\nOops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(CompiladorAula)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /*PALAVRAS RESERVADAS */
{
  < CREATEWORLD    : "createworld"                        >
| < OVERWORLD      : "overworld"                          >
| < BEDROCK        : "bedrock"                            >
| < TIPOINTEIRO    : "pedra"                              >
| < TIPOFLUTUANTE  : "agua"                               >
| < TIPOTEXTO      : "placa"                              >
| < TIPOGRAVETO    : "graveto"                            >
| < TIPODIAMANTE   : "diamante"                           >
| < TIPOBINARIO    : "redstone"                           >
| < IF             : "vinicius13"                         >
| < THEN           : "build"                              >
| < ELSE           : "monark"                             >
| < TRUE           : "tocha_acessa"                       >
| < FALSE          : "tocha_apagada"                      >
| < AND            : "repetidor"                          >
| < OR             : "or"                                 >
| < NOT            : "tocha_invertida"                    >
| < ABRIRELSE      : "acordaaaa_gente"                    >
| < FECHARELSE     : "ja_tamo_na_ditadura"                >
| < ABRIRIF        : "abririf"                            >
| < FECHARIF       : "fecharif"                           >
| < WHILE          : "em_busca_da_casa_automatica"        >
| < ABRIRWHILE     : "abrirwhile"                         >
| < FECHARWHILE    : "fecharwhile"                        >
| < BREAK          : "instakill"                          >
| < FOR            : "intro_do_venon_extreme"             >
| < ABRIRFOR       : "abrirfor"                           >
| < FECHARFOR       : "fechafor"                           >
} 

TOKEN : /*OPERADORES*/
{
	< SOMA: "combine"          >
|	< SUBTRACAO: "-"           >
|	< MULTIPLICACAO: "*"       >
|	< DIVISAO: "/"             >	
|	< ATRIBUICAO: "<-"         >
|	< MAIOR: "stronger"        >
|	< MENOR: "weaker"          >
|	< MENOR_IGUAL: "<="        >
|	< MAIOR_IGUAL: ">="        >
|	< DIFERENTE: "<>"          > 
|	< IGUAL: "="               >
}

TOKEN :
{
  < DECIMAL            : (< DIGITO >)+ ( "." (<DIGITO>)+ )?                                  >
| < DIGITO             : [ "0"-"9" ]                                                         >
| < ID                 : ["a" - "z" , "A" - "Z"](["a" - "z" , "A" - "Z" , "0" - "9", "_"])*  > 
| < LETRA              : ["A" - "Z" ] | ["a" - "z"]                                          >
| < PONTOVIRGULA       : ";"                                                                 >
| < VIRGULA            : ","                                                                 >
| < STRING             : "'" (~["'"])* "'"                                                   >
| < PARENTES_ESQUERDA  : "("                                                                 >
| < PARENTES_DIREITA   : ")"                                                                 >
| < DELIMITAR_VARCHAR  : "'"                                                                 > 
}


/* ---------------------------------------------------- START BLOCO PRINCIPAL ---------------------------------------------------------------------------------*/
void main() : {}
{
  <CREATEWORLD> <ID> <PONTOVIRGULA> 
  bloco()
}

void bloco() : { }
{
  <OVERWORLD> (declaracaoVariavel())* (comando())* <BEDROCK> 
}

/* ---------------------------------------------------- END BLOCO PRINCIPAL ---------------------------------------------------------------------------------*/

void comando() : {} 
{
  atribuicao()
 | ifStmt()
 | whileLoop()
 | forLoop() 
 | breakStmt()
}

/* ---------------------------------------------------- START BLOCO WHILE ---------------------------------------------------------------------------------*/
void whileLoop() : {}
{
  <WHILE> expressaoBooleana()
  <ABRIRWHILE> blocoWhile() <FECHARWHILE>
}

void blocoWhile() : {} { ( declaracaoVariavel() |comando())+ }

/* Sintático: aceita sempre; a regra “só dentro de loop” é semântica */
void breakStmt() : {}
{
  <BREAK> <PONTOVIRGULA>
}

/* ---------------------------------------------------- END BLOCO WHILE ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- START BLOCO FOR ---------------------------------------------------------------------------------*/
void forLoop() : {}
{
  <FOR> <PARENTES_ESQUERDA>
      forInitOpt() <PONTOVIRGULA>
      forCondOpt() <PONTOVIRGULA>
      forUpdateOpt()
  <PARENTES_DIREITA>
  <ABRIRFOR> blocoFor() <FECHARFOR>
}

void blocoFor() : {} { ( declaracaoVariavel() |comando())+ }

void forInitOpt()   : {} { ( forInit() )? }
void forCondOpt()   : {} { ( expressaoBooleana() )? }
void forUpdateOpt() : {} { ( atribuicaoFor() ( <VIRGULA> atribuicaoFor() )* )? }

void forInit() : {}
{
    tipoDado() listaDeclaracoes()         // ex.: pedra i <- 0, j <- 1
  | atribuicaoFor()                       // ex.: i <- 0
}

void atribuicaoFor() : {}
{
  <ID> <ATRIBUICAO> expressaoGeral()      // igual atribuição, só que SEM ; no fim
}

/* ---------------------------------------------------- END BLOCO FOR ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- START ESTRUTURA DE CONTROLE ---------------------------------------------------------------------------------*/
void ifStmt() : {}
{
  <IF> expressaoBooleana()
  <ABRIRIF> <THEN> blocoIf() <FECHARIF>
  ( <ELSE> <ABRIRELSE> blocoElse() <FECHARELSE> )?
}

void blocoIf()   : {} { ( declaracaoVariavel() | comando())+ }
void blocoElse() : {} { ( declaracaoVariavel()  | comando())+ }

/* ---------------------------------------------------- END ESTRUTURA DE CONTROLE ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- START ATRIBUIÇÃO ---------------------------------------------------------------------------------*/
void atribuicao() : {}
{
  <ID> <ATRIBUICAO> expressaoGeral()
  ( <PONTOVIRGULA> |
    {
      Token prox = token.next; 
      throw new ParseException("Faltou ';' no fim da atribuição (" + pos(prox) + ").");
    }
  )
}
/* ---------------------------------------------------- END ATRIBUIÇÃO ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- START CONTROLE DE EXPRESSÕES ---------------------------------------------------------------------------------*/
void expressaoGeral() : {}
{
    expressaoTexto()

  // booleano óbvio
  | LOOKAHEAD( <TRUE> | <FALSE> | <NOT> )
      expressaoBooleana()

  // (ID opRel ...) ou (DECIMAL opRel ...) logo após "("
  | LOOKAHEAD( <PARENTES_ESQUERDA> <ID> ( <IGUAL> | <DIFERENTE> | <MENOR> | <MAIOR> | <MENOR_IGUAL> | <MAIOR_IGUAL> ) )
      expressaoBooleana()
  | LOOKAHEAD( <PARENTES_ESQUERDA> <DECIMAL> ( <IGUAL> | <DIFERENTE> | <MENOR> | <MAIOR> | <MENOR_IGUAL> | <MAIOR_IGUAL> ) )
      expressaoBooleana()

  // ((ID opRel ...)) ou ((DECIMAL opRel ...)) — parêntese duplo com comparação logo no segundo "("
  | LOOKAHEAD( <PARENTES_ESQUERDA> <PARENTES_ESQUERDA> <ID> ( <IGUAL> | <DIFERENTE> | <MENOR> | <MAIOR> | <MENOR_IGUAL> | <MAIOR_IGUAL> ) )
      expressaoBooleana()
  | LOOKAHEAD( <PARENTES_ESQUERDA> <PARENTES_ESQUERDA> <DECIMAL> ( <IGUAL> | <DIFERENTE> | <MENOR> | <MAIOR> | <MENOR_IGUAL> | <MAIOR_IGUAL> ) )
      expressaoBooleana()

  // ( <exprArit> opRel <exprArit> )  — p.ex. (a combine 1 stronger b - 2)
  | LOOKAHEAD( <PARENTES_ESQUERDA> expressao() tipoCondicao() )
      expressaoBooleana()

  // <exprArit> opRel <exprArit> — sem parênteses
  | LOOKAHEAD( expressao() tipoCondicao() )
      expressaoBooleana()

  // fallback: numérica
  | expressao()
}

/* ---------------------------------------------------- END CONTROLE DE EXPRESSÕES ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- START EXPRESSAO NÚMERICA ---------------------------------------------------------------------------------*/

/* Expressões numéricas (somente números, variáveis e parênteses) */
void expressao() : {}
{
  termoNumerico() ( ( <SOMA> | <SUBTRACAO> ) termoNumerico() )*
}

void termoNumerico() : {}
{
  fatorNumerico() ( ( <MULTIPLICACAO> | <DIVISAO> ) fatorNumerico() )*
}

void fatorNumerico() : {}
{
  <ID> | <DECIMAL> | <PARENTES_ESQUERDA> expressao() <PARENTES_DIREITA>
}

/* ---------------------------------------------------- END EXPRESSAO NUMÉRICA ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- START EXPRESSAO TEXTO ---------------------------------------------------------------------------------*/


void expressaoTexto() : {}
{
  < STRING > 
}
/* ---------------------------------------------------- END EXPRESSAO TEXTO ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- START EXPRESSAO BOOLEANA ---------------------------------------------------------------------------------*/

void expressaoBooleana() : {}
{
  termoBooleano() ( <OR> termoBooleano() )*
}

void termoBooleano() : {}
{
  fatorBooleano() ( <AND> fatorBooleano() )*
}

void fatorBooleano() : {}
{
    <TRUE>
  | <FALSE>
  | <NOT> fatorBooleano()
  | parentesadoBoolOuRel()                        
  | LOOKAHEAD( <ID> tipoCondicao() ) comparacaoNumerica()  
  | LOOKAHEAD( <DECIMAL> tipoCondicao() ) comparacaoNumerica()
  | <ID>                                          // ID booleano (ex.: pronto)
}

void parentesadoBoolOuRel() : {}
{
  LOOKAHEAD( <PARENTES_ESQUERDA> expressao() tipoCondicao() )
    <PARENTES_ESQUERDA> expressao() tipoCondicao() expressao() <PARENTES_DIREITA>
|
    <PARENTES_ESQUERDA> expressaoBooleana() <PARENTES_DIREITA>
}
/* ---------------------------------------------------- END EXPRESSAO BOOLEANA ---------------------------------------------------------------------------------*/

void comparacaoNumerica() : {}
{
  expressao() tipoCondicao() expressao()
}

/* ---------------------------------------------------- START DECLARACAO VARIAVEL ---------------------------------------------------------------------------------*/

void declaracaoVariavel() : {}
{
  tipoDado() listaDeclaracoes() <PONTOVIRGULA>
}

void listaDeclaracoes() : {}
{
  declaracaoUnica() ( <VIRGULA> declaracaoUnica() )*
}

void declaracaoUnica() : {}
{
  <ID> ( <ATRIBUICAO>  expressaoGeral() )?
}

/* ---------------------------------------------------- END DECLARACAO VARIAVEL ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- START TIPOS DE DADOS---------------------------------------------------------------------------------*/

void tipoDado() : {} 
{
	< TIPOINTEIRO > | <  TIPOBINARIO > | < TIPOTEXTO > | < TIPOFLUTUANTE > | < TIPOGRAVETO > | < TIPODIAMANTE >
}
/* ---------------------------------------------------- END TIPOS DE DADOS ---------------------------------------------------------------------------------*/

/* ---------------------------------------------------- STAR TIPO DE CONDIÇÃO ---------------------------------------------------------------------------------*/

void tipoCondicao() : {} 
{
	<MAIOR> | <MENOR> | <MAIOR_IGUAL> | <MENOR_IGUAL> | <IGUAL> | <DIFERENTE> 
}

/* ---------------------------------------------------- STAR TIPO DE CONDIÇÃO ---------------------------------------------------------------------------------*/

